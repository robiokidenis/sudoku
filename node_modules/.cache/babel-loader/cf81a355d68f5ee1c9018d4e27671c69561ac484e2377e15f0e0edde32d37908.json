{"ast":null,"code":"var _jsxFileName = \"/Users/robiokidenis/Projects/Game/sudoku-react/src/components/Timer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useSudokuContext } from \"../context/SudokuContext\";\nimport moment from \"moment\";\n\n/**\n * React component for the Timer in Status Section.\n * Uses the 'useEffect' hook to update the timer every minute.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Timer = () => {\n  _s();\n  // let [currentTime, setCurrentTime] = useState(moment());\n  let [counterTime, setCounterTime] = useState(0);\n  let {\n    timeGameStarted,\n    won,\n    paused\n  } = useSudokuContext();\n  let totalSeconds = 0;\n  useEffect(() => {\n    if (!won && !paused) setTimeout(() => tick(), 1000);\n  });\n  function tick() {\n    // setCurrentTime(moment());\n    countTimer();\n  }\n\n  // function getTimer() {\n  //   let secondsTotal = currentTime.diff(timeGameStarted, \"seconds\");\n  //   if (secondsTotal <= 0) return \"00:00\";\n  //   let duration = moment.duration(secondsTotal, \"seconds\");\n  //   let hours = duration.hours();\n  //   let minutes = duration.minutes();\n  //   let seconds = duration.seconds();\n  //   let stringTimer = \"\";\n\n  //   stringTimer += hours ? \"\" + hours + \":\" : \"\";\n  //   stringTimer += minutes ? (minutes < 10 ? \"0\" : \"\") + minutes + \":\" : \"00:\";\n  //   stringTimer += seconds < 10 ? \"0\" + seconds : seconds;\n\n  //   return stringTimer;\n  // }\n\n  function countTimer() {\n    console.log(moment());\n    // ++counterTime;\n    setCounterTime(counterTime + 1);\n    var hours = Math.floor(counterTime / 3600);\n    var minutes = Math.floor((counterTime - hours * 3600) / 60);\n    var seconds = counterTime - (hours * 3600 + minutes * 60);\n    let stringTimer = \"\";\n    stringTimer += hours ? \"\" + hours + \":\" : \"\";\n    stringTimer += minutes ? (minutes < 10 ? \"0\" : \"\") + minutes + \":\" : \"00:\";\n    stringTimer += seconds < 10 ? \"0\" + seconds : seconds;\n    // return stringTimer;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"status__time\",\n    children: counterTime\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 10\n  }, this);\n};\n_s(Timer, \"Rtv89Ey/VTRs3lhmyJ8uo8CLiNU=\", false, function () {\n  return [useSudokuContext];\n});\n_c = Timer;\nvar _c;\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["React","useState","useEffect","useSudokuContext","moment","Timer","counterTime","setCounterTime","timeGameStarted","won","paused","totalSeconds","setTimeout","tick","countTimer","console","log","hours","Math","floor","minutes","seconds","stringTimer"],"sources":["/Users/robiokidenis/Projects/Game/sudoku-react/src/components/Timer.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useSudokuContext } from \"../context/SudokuContext\";\nimport moment from \"moment\";\n\n/**\n * React component for the Timer in Status Section.\n * Uses the 'useEffect' hook to update the timer every minute.\n */\nexport const Timer = () => {\n  // let [currentTime, setCurrentTime] = useState(moment());\n  let [counterTime, setCounterTime] = useState(0);\n  let { timeGameStarted, won, paused } = useSudokuContext();\n  let totalSeconds: number = 0;\n\n  useEffect(() => {\n    if (!won && !paused) setTimeout(() => tick(), 1000);\n  });\n\n  function tick() {\n    // setCurrentTime(moment());\n    countTimer();\n  }\n\n  // function getTimer() {\n  //   let secondsTotal = currentTime.diff(timeGameStarted, \"seconds\");\n  //   if (secondsTotal <= 0) return \"00:00\";\n  //   let duration = moment.duration(secondsTotal, \"seconds\");\n  //   let hours = duration.hours();\n  //   let minutes = duration.minutes();\n  //   let seconds = duration.seconds();\n  //   let stringTimer = \"\";\n\n  //   stringTimer += hours ? \"\" + hours + \":\" : \"\";\n  //   stringTimer += minutes ? (minutes < 10 ? \"0\" : \"\") + minutes + \":\" : \"00:\";\n  //   stringTimer += seconds < 10 ? \"0\" + seconds : seconds;\n\n  //   return stringTimer;\n  // }\n\n  function countTimer():void {\n    console.log(moment());\n    // ++counterTime;\n    setCounterTime(counterTime+1);\n    var hours = Math.floor(counterTime / 3600);\n    var minutes = Math.floor((counterTime - hours * 3600) / 60);\n    var seconds = counterTime - (hours * 3600 + minutes * 60);\n    let stringTimer = \"\";\n\n    stringTimer += hours ? \"\" + hours + \":\" : \"\";\n    stringTimer += minutes ? (minutes < 10 ? \"0\" : \"\") + minutes + \":\" : \"00:\";\n    stringTimer += seconds < 10 ? \"0\" + seconds : seconds;\n    // return stringTimer;\n  }\n\n  return <div className=\"status__time\">{counterTime}</div>;\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,gBAAgB,QAAQ,0BAA0B;AAC3D,OAAOC,MAAM,MAAM,QAAQ;;AAE3B;AACA;AACA;AACA;AAHA;AAIA,OAAO,MAAMC,KAAK,GAAG,MAAM;EAAA;EACzB;EACA,IAAI,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EAC/C,IAAI;IAAEO,eAAe;IAAEC,GAAG;IAAEC;EAAO,CAAC,GAAGP,gBAAgB,EAAE;EACzD,IAAIQ,YAAoB,GAAG,CAAC;EAE5BT,SAAS,CAAC,MAAM;IACd,IAAI,CAACO,GAAG,IAAI,CAACC,MAAM,EAAEE,UAAU,CAAC,MAAMC,IAAI,EAAE,EAAE,IAAI,CAAC;EACrD,CAAC,CAAC;EAEF,SAASA,IAAI,GAAG;IACd;IACAC,UAAU,EAAE;EACd;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA,SAASA,UAAU,GAAQ;IACzBC,OAAO,CAACC,GAAG,CAACZ,MAAM,EAAE,CAAC;IACrB;IACAG,cAAc,CAACD,WAAW,GAAC,CAAC,CAAC;IAC7B,IAAIW,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACb,WAAW,GAAG,IAAI,CAAC;IAC1C,IAAIc,OAAO,GAAGF,IAAI,CAACC,KAAK,CAAC,CAACb,WAAW,GAAGW,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;IAC3D,IAAII,OAAO,GAAGf,WAAW,IAAIW,KAAK,GAAG,IAAI,GAAGG,OAAO,GAAG,EAAE,CAAC;IACzD,IAAIE,WAAW,GAAG,EAAE;IAEpBA,WAAW,IAAIL,KAAK,GAAG,EAAE,GAAGA,KAAK,GAAG,GAAG,GAAG,EAAE;IAC5CK,WAAW,IAAIF,OAAO,GAAG,CAACA,OAAO,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,IAAIA,OAAO,GAAG,GAAG,GAAG,KAAK;IAC1EE,WAAW,IAAID,OAAO,GAAG,EAAE,GAAG,GAAG,GAAGA,OAAO,GAAGA,OAAO;IACrD;EACF;;EAEA,oBAAO;IAAK,SAAS,EAAC,cAAc;IAAA,UAAEf;EAAW;IAAA;IAAA;IAAA;EAAA,QAAO;AAC1D,CAAC;AAAC,GA/CWD,KAAK;EAAA,QAGuBF,gBAAgB;AAAA;AAAA,KAH5CE,KAAK;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}