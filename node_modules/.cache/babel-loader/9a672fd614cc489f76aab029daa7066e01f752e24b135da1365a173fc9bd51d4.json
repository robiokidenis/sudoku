{"ast":null,"code":"var _jsxFileName = \"/Users/robiokidenis/Projects/Game/sudoku-react/src/components/Timer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useSudokuContext } from \"../context/SudokuContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\n * React component for the Timer in Status Section.\n * Uses the 'useEffect' hook to update the timer every minute.\n */\nexport const Timer = () => {\n  _s();\n  // let [currentTime, setCurrentTime] = useState(moment());\n  let [counterTime, setCounterTime] = useState(0);\n  let {\n    timeGameStarted,\n    won,\n    paused\n  } = useSudokuContext();\n  let totalSeconds = 0;\n  useEffect(() => {\n    if (!won && !paused) setTimeout(() => tick(), 1000);\n  });\n  function tick() {\n    // setCurrentTime(moment());\n    setCounterTime(counterTime + 1);\n  }\n\n  // function getTimer() {\n  //   let secondsTotal = currentTime.diff(timeGameStarted, \"seconds\");\n  //   if (secondsTotal <= 0) return \"00:00\";\n  //   let duration = moment.duration(secondsTotal, \"seconds\");\n  //   let hours = duration.hours();\n  //   let minutes = duration.minutes();\n  //   let seconds = duration.seconds();\n  //   let stringTimer = \"\";\n\n  //   stringTimer += hours ? \"\" + hours + \":\" : \"\";\n  //   stringTimer += minutes ? (minutes < 10 ? \"0\" : \"\") + minutes + \":\" : \"00:\";\n  //   stringTimer += seconds < 10 ? \"0\" + seconds : seconds;\n\n  //   return stringTimer;\n  // }\n\n  function formatTime(num) {\n    let stringTimer = \"\";\n    var hours = Math.floor(num / 3600);\n    var minutes = Math.floor((num - hours * 3600) / 60);\n    var seconds = counterTime - (hours * 3600 + minutes * 60);\n    stringTimer += hours ? \"\" + hours + \":\" : \"\";\n    stringTimer += minutes ? (minutes < 10 ? \"0\" : \"\") + minutes + \":\" : \"00:\";\n    stringTimer += seconds < 10 ? \"0\" + seconds : seconds;\n    return stringTimer;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"status__time\",\n    children: formatTime(counterTime)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 10\n  }, this);\n};\n_s(Timer, \"Rtv89Ey/VTRs3lhmyJ8uo8CLiNU=\", false, function () {\n  return [useSudokuContext];\n});\n_c = Timer;\nvar _c;\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["React","useState","useEffect","useSudokuContext","Timer","counterTime","setCounterTime","timeGameStarted","won","paused","totalSeconds","setTimeout","tick","formatTime","num","stringTimer","hours","Math","floor","minutes","seconds"],"sources":["/Users/robiokidenis/Projects/Game/sudoku-react/src/components/Timer.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useSudokuContext } from \"../context/SudokuContext\";\nimport moment from \"moment\";\n\n/**\n * React component for the Timer in Status Section.\n * Uses the 'useEffect' hook to update the timer every minute.\n */\nexport const Timer = () => {\n  // let [currentTime, setCurrentTime] = useState(moment());\n  let [counterTime, setCounterTime] = useState(0);\n  let { timeGameStarted, won, paused } = useSudokuContext();\n  let totalSeconds: number = 0;\n\n  useEffect(() => {\n    if (!won && !paused) setTimeout(() => tick(), 1000);\n  });\n\n  function tick() {\n    // setCurrentTime(moment());\n    setCounterTime(counterTime + 1);\n  }\n\n  // function getTimer() {\n  //   let secondsTotal = currentTime.diff(timeGameStarted, \"seconds\");\n  //   if (secondsTotal <= 0) return \"00:00\";\n  //   let duration = moment.duration(secondsTotal, \"seconds\");\n  //   let hours = duration.hours();\n  //   let minutes = duration.minutes();\n  //   let seconds = duration.seconds();\n  //   let stringTimer = \"\";\n\n  //   stringTimer += hours ? \"\" + hours + \":\" : \"\";\n  //   stringTimer += minutes ? (minutes < 10 ? \"0\" : \"\") + minutes + \":\" : \"00:\";\n  //   stringTimer += seconds < 10 ? \"0\" + seconds : seconds;\n\n  //   return stringTimer;\n  // }\n\n  function formatTime(num: any): string {\n    let stringTimer = \"\";\n    var hours = Math.floor(num / 3600);\n    var minutes = Math.floor((num - hours * 3600) / 60);\n    var seconds = counterTime - (hours * 3600 + minutes * 60);\n    stringTimer += hours ? \"\" + hours + \":\" : \"\";\n    stringTimer += minutes ? (minutes < 10 ? \"0\" : \"\") + minutes + \":\" : \"00:\";\n    stringTimer += seconds < 10 ? \"0\" + seconds : seconds;\n    return stringTimer;\n  }\n  \n  return <div className=\"status__time\">{formatTime(counterTime)}</div>;\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,gBAAgB,QAAQ,0BAA0B;AAAC;AAG5D;AACA;AACA;AACA;AACA,OAAO,MAAMC,KAAK,GAAG,MAAM;EAAA;EACzB;EACA,IAAI,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGL,QAAQ,CAAC,CAAC,CAAC;EAC/C,IAAI;IAAEM,eAAe;IAAEC,GAAG;IAAEC;EAAO,CAAC,GAAGN,gBAAgB,EAAE;EACzD,IAAIO,YAAoB,GAAG,CAAC;EAE5BR,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,GAAG,IAAI,CAACC,MAAM,EAAEE,UAAU,CAAC,MAAMC,IAAI,EAAE,EAAE,IAAI,CAAC;EACrD,CAAC,CAAC;EAEF,SAASA,IAAI,GAAG;IACd;IACAN,cAAc,CAACD,WAAW,GAAG,CAAC,CAAC;EACjC;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA,SAASQ,UAAU,CAACC,GAAQ,EAAU;IACpC,IAAIC,WAAW,GAAG,EAAE;IACpB,IAAIC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACJ,GAAG,GAAG,IAAI,CAAC;IAClC,IAAIK,OAAO,GAAGF,IAAI,CAACC,KAAK,CAAC,CAACJ,GAAG,GAAGE,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;IACnD,IAAII,OAAO,GAAGf,WAAW,IAAIW,KAAK,GAAG,IAAI,GAAGG,OAAO,GAAG,EAAE,CAAC;IACzDJ,WAAW,IAAIC,KAAK,GAAG,EAAE,GAAGA,KAAK,GAAG,GAAG,GAAG,EAAE;IAC5CD,WAAW,IAAII,OAAO,GAAG,CAACA,OAAO,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,IAAIA,OAAO,GAAG,GAAG,GAAG,KAAK;IAC1EJ,WAAW,IAAIK,OAAO,GAAG,EAAE,GAAG,GAAG,GAAGA,OAAO,GAAGA,OAAO;IACrD,OAAOL,WAAW;EACpB;EAEA,oBAAO;IAAK,SAAS,EAAC,cAAc;IAAA,UAAEF,UAAU,CAACR,WAAW;EAAC;IAAA;IAAA;IAAA;EAAA,QAAO;AACtE,CAAC;AAAC,GA3CWD,KAAK;EAAA,QAGuBD,gBAAgB;AAAA;AAAA,KAH5CC,KAAK;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}