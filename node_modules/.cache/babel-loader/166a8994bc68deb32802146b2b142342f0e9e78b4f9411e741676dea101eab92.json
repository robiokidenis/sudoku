{"ast":null,"code":"var _jsxFileName = \"/Users/robiokidenis/Projects/Game/sudoku-react/src/Game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport { Header } from \"./components/layout/Header\";\nimport { GameSection } from \"./components/layout/GameSection\";\nimport { StatusSection } from \"./components/layout/StatusSection\";\nimport { Footer } from \"./components/layout/Footer\";\nimport { getUniqueSudoku } from \"./solver/UniqueSudoku\";\nimport { useSudokuContext } from \"./context/SudokuContext\";\n\n/**\n * Game is the main React component.\n */\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Game = () => {\n  _s();\n  /**\n   * All the variables for holding state:\n   * gameArray: Holds the current state of the game.\n   * initArray: Holds the initial state of the game.\n   * solvedArray: Holds the solved position of the game.\n   * difficulty: Difficulty level - 'Easy', 'Medium' or 'Hard'\n   * numberSelected: The Number selected in the Status section.\n   * timeGameStarted: Time the current game was started.\n   * mistakesMode: Is Mistakes allowed or not?\n   * fastMode: Is Fast Mode enabled?\n   * cellSelected: If a game cell is selected by the user, holds the index.\n   * history: history of the current game, for 'Undo' purposes.\n   * overlay: Is the 'Game Solved' overlay enabled?\n   * won: Is the game 'won'?\n   */\n  let {\n    numberSelected,\n    setNumberSelected,\n    gameArray,\n    setGameArray,\n    difficulty,\n    setDifficulty,\n    setTimeGameStarted,\n    fastMode,\n    setFastMode,\n    cellSelected,\n    setCellSelected,\n    initArray,\n    setInitArray,\n    setWon,\n    paused,\n    setPaused\n  } = useSudokuContext();\n  let [mistakesMode, setMistakesMode] = useState(false);\n  let [history, setHistory] = useState([]);\n  let [solvedArray, setSolvedArray] = useState([]);\n  let [overlay, setOverlay] = useState(false);\n\n  /**\n   * Creates a new game and initializes the state variables.\n   */\n  function _createNewGame(e) {\n    let [temporaryInitArray, temporarySolvedArray] = getUniqueSudoku(difficulty, e);\n    setInitArray(temporaryInitArray);\n    setGameArray(temporaryInitArray);\n    setSolvedArray(temporarySolvedArray);\n    setNumberSelected(\"0\");\n    setTimeGameStarted(moment());\n    setCellSelected(-1);\n    setHistory([]);\n    setWon(false);\n  }\n\n  /**\n   * Checks if the game is solved.\n   */\n  function _isSolved(index, value) {\n    if (gameArray.every((cell, cellIndex) => {\n      if (cellIndex === index) return value === solvedArray[cellIndex];else return cell === solvedArray[cellIndex];\n    })) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Fills the cell with the given 'value'\n   * Used to Fill / Erase as required.\n   */\n  function _fillCell(index, value) {\n    if (initArray[index] === \"0\") {\n      // Direct copy results in interesting set of problems, investigate more!\n      let tempArray = gameArray.slice();\n      let tempHistory = history.slice();\n\n      // Can't use tempArray here, due to Side effect below!!\n      tempHistory.push(gameArray.slice());\n      setHistory(tempHistory);\n      tempArray[index] = value;\n      setGameArray(tempArray);\n      if (_isSolved(index, value)) {\n        setOverlay(true);\n        setWon(true);\n      }\n    }\n  }\n\n  /**\n   * A 'user fill' will be passed on to the\n   * _fillCell function above.\n   */\n  function _userFillCell(index, value) {\n    if (mistakesMode) {\n      if (value === solvedArray[index]) {\n        _fillCell(index, value);\n      } else {\n        // TODO: Flash - Mistakes not allowed in Mistakes Mode\n      }\n    } else {\n      _fillCell(index, value);\n    }\n  }\n\n  /**\n   * On Click of 'New Game' link,\n   * create a new game.\n   */\n  function onClickNewGame() {\n    _createNewGame();\n  }\n\n  /**\n   * On Click of a Game cell.\n   */\n  function onClickCell(indexOfArray) {\n    if (fastMode && numberSelected !== \"0\") {\n      _userFillCell(indexOfArray, numberSelected);\n    }\n    setCellSelected(indexOfArray);\n  }\n\n  /**\n   * On Change Difficulty,\n   * 1. Update 'Difficulty' level\n   * 2. Create New Game\n   */\n  function onChangeDifficulty(e) {\n    setDifficulty(e.target.value);\n    _createNewGame(e);\n  }\n\n  /**\n   * On Click of Number in Status section,\n   * either fill cell or set the number.\n   */\n  function onClickNumber(number) {\n    if (fastMode) {\n      setNumberSelected(number);\n    } else if (cellSelected !== -1) {\n      _userFillCell(cellSelected, number);\n    }\n  }\n\n  /**\n   * On Click Undo,\n   * try to Undo the latest change.\n   */\n  function onClickUndo() {\n    if (history.length) {\n      let tempHistory = history.slice();\n      let tempArray = tempHistory.pop();\n      setHistory(tempHistory);\n      if (tempArray !== undefined) setGameArray(tempArray);\n    }\n  }\n\n  /**\n   * On Click Erase,\n   * try to delete the cell.\n   */\n  function onClickErase() {\n    if (cellSelected !== -1 && gameArray[cellSelected] !== \"0\") {\n      _fillCell(cellSelected, \"0\");\n    }\n  }\n\n  /**\n   * On Click Hint,\n   * fill the selected cell if its empty or wrong number is filled.\n   */\n  function onClickHint() {\n    if (cellSelected !== -1) {\n      _fillCell(cellSelected, solvedArray[cellSelected]);\n    }\n  }\n  function onClickPause() {\n    setPaused(!paused);\n  }\n\n  /**\n   * Toggle Mistakes Mode\n   */\n  function onClickMistakesMode() {\n    setMistakesMode(!mistakesMode);\n  }\n\n  /**\n   * Toggle Fast Mode\n   */\n  function onClickFastMode() {\n    if (fastMode) {\n      setNumberSelected(\"0\");\n    }\n    setCellSelected(-1);\n    setFastMode(!fastMode);\n  }\n\n  /**\n   * Close the overlay on Click.\n   */\n  function onClickOverlay() {\n    setOverlay(false);\n    _createNewGame();\n  }\n\n  /**\n   * On load, create a New Game.\n   */\n  useEffect(() => {\n    _createNewGame();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: overlay ? \"container blur\" : \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        onClick: onClickNewGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"innercontainer\",\n        children: [/*#__PURE__*/_jsxDEV(GameSection, {\n          onClick: indexOfArray => onClickCell(indexOfArray)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StatusSection, {\n          onClickNumber: number => onClickNumber(number),\n          onChange: e => onChangeDifficulty(e),\n          onClickUndo: onClickUndo,\n          onClickErase: onClickErase,\n          onClickHint: onClickHint,\n          onClickMistakesMode: onClickMistakesMode,\n          onClickFastMode: onClickFastMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: overlay ? \"overlay overlay--visible\" : \"overlay\",\n      onClick: onClickOverlay,\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"overlay__text\",\n        children: [\"You \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"overlay__textspan1\",\n          children: \"solved\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 15\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"overlay__textspan2\",\n          children: \"it!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Game, \"cP7bry5qocEGIa2qu4dqO/wfG1o=\", false, function () {\n  return [useSudokuContext];\n});\n_c = Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","moment","Header","GameSection","StatusSection","Footer","getUniqueSudoku","useSudokuContext","Game","numberSelected","setNumberSelected","gameArray","setGameArray","difficulty","setDifficulty","setTimeGameStarted","fastMode","setFastMode","cellSelected","setCellSelected","initArray","setInitArray","setWon","paused","setPaused","mistakesMode","setMistakesMode","history","setHistory","solvedArray","setSolvedArray","overlay","setOverlay","_createNewGame","e","temporaryInitArray","temporarySolvedArray","_isSolved","index","value","every","cell","cellIndex","_fillCell","tempArray","slice","tempHistory","push","_userFillCell","onClickNewGame","onClickCell","indexOfArray","onChangeDifficulty","target","onClickNumber","number","onClickUndo","length","pop","undefined","onClickErase","onClickHint","onClickPause","onClickMistakesMode","onClickFastMode","onClickOverlay"],"sources":["/Users/robiokidenis/Projects/Game/sudoku-react/src/Game.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport { Header } from \"./components/layout/Header\";\nimport { GameSection } from \"./components/layout/GameSection\";\nimport { StatusSection } from \"./components/layout/StatusSection\";\nimport { Footer } from \"./components/layout/Footer\";\nimport { getUniqueSudoku } from \"./solver/UniqueSudoku\";\nimport { useSudokuContext } from \"./context/SudokuContext\";\n\n/**\n * Game is the main React component.\n */\nexport const Game: React.FC<{}> = () => {\n  /**\n   * All the variables for holding state:\n   * gameArray: Holds the current state of the game.\n   * initArray: Holds the initial state of the game.\n   * solvedArray: Holds the solved position of the game.\n   * difficulty: Difficulty level - 'Easy', 'Medium' or 'Hard'\n   * numberSelected: The Number selected in the Status section.\n   * timeGameStarted: Time the current game was started.\n   * mistakesMode: Is Mistakes allowed or not?\n   * fastMode: Is Fast Mode enabled?\n   * cellSelected: If a game cell is selected by the user, holds the index.\n   * history: history of the current game, for 'Undo' purposes.\n   * overlay: Is the 'Game Solved' overlay enabled?\n   * won: Is the game 'won'?\n   */\n  let {\n    numberSelected,\n    setNumberSelected,\n    gameArray,\n    setGameArray,\n    difficulty,\n    setDifficulty,\n    setTimeGameStarted,\n    fastMode,\n    setFastMode,\n    cellSelected,\n    setCellSelected,\n    initArray,\n    setInitArray,\n    setWon,\n    paused,\n    setPaused,\n  } = useSudokuContext();\n  let [mistakesMode, setMistakesMode] = useState<boolean>(false);\n  let [history, setHistory] = useState<string[][]>([]);\n  let [solvedArray, setSolvedArray] = useState<string[]>([]);\n  let [overlay, setOverlay] = useState<boolean>(false);\n\n  /**\n   * Creates a new game and initializes the state variables.\n   */\n  function _createNewGame(e?: React.ChangeEvent<HTMLSelectElement>) {\n    let [temporaryInitArray, temporarySolvedArray] = getUniqueSudoku(\n      difficulty,\n      e\n    );\n\n    setInitArray(temporaryInitArray);\n    setGameArray(temporaryInitArray);\n    setSolvedArray(temporarySolvedArray);\n    setNumberSelected(\"0\");\n    setTimeGameStarted(moment());\n    setCellSelected(-1);\n    setHistory([]);\n    setWon(false);\n  }\n\n  /**\n   * Checks if the game is solved.\n   */\n  function _isSolved(index: number, value: string) {\n    if (\n      gameArray.every((cell: string, cellIndex: number) => {\n        if (cellIndex === index) return value === solvedArray[cellIndex];\n        else return cell === solvedArray[cellIndex];\n      })\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Fills the cell with the given 'value'\n   * Used to Fill / Erase as required.\n   */\n  function _fillCell(index: number, value: string) {\n    if (initArray[index] === \"0\") {\n      // Direct copy results in interesting set of problems, investigate more!\n      let tempArray = gameArray.slice();\n      let tempHistory = history.slice();\n\n      // Can't use tempArray here, due to Side effect below!!\n      tempHistory.push(gameArray.slice());\n      setHistory(tempHistory);\n\n      tempArray[index] = value;\n      setGameArray(tempArray);\n\n      if (_isSolved(index, value)) {\n        setOverlay(true);\n        setWon(true);\n      }\n    }\n  }\n\n  /**\n   * A 'user fill' will be passed on to the\n   * _fillCell function above.\n   */\n  function _userFillCell(index: number, value: string) {\n    if (mistakesMode) {\n      if (value === solvedArray[index]) {\n        _fillCell(index, value);\n      } else {\n        // TODO: Flash - Mistakes not allowed in Mistakes Mode\n      }\n    } else {\n      _fillCell(index, value);\n    }\n  }\n\n  /**\n   * On Click of 'New Game' link,\n   * create a new game.\n   */\n  function onClickNewGame() {\n    _createNewGame();\n  }\n\n  /**\n   * On Click of a Game cell.\n   */\n  function onClickCell(indexOfArray: number) {\n    if (fastMode && numberSelected !== \"0\") {\n      _userFillCell(indexOfArray, numberSelected);\n    }\n    setCellSelected(indexOfArray);\n  }\n\n  /**\n   * On Change Difficulty,\n   * 1. Update 'Difficulty' level\n   * 2. Create New Game\n   */\n  function onChangeDifficulty(e: React.ChangeEvent<HTMLSelectElement>) {\n    setDifficulty(e.target.value);\n    _createNewGame(e);\n  }\n\n  /**\n   * On Click of Number in Status section,\n   * either fill cell or set the number.\n   */\n  function onClickNumber(number: string) {\n    if (fastMode) {\n      setNumberSelected(number);\n    } else if (cellSelected !== -1) {\n      _userFillCell(cellSelected, number);\n    }\n  }\n\n  /**\n   * On Click Undo,\n   * try to Undo the latest change.\n   */\n  function onClickUndo() {\n    if (history.length) {\n      let tempHistory = history.slice();\n      let tempArray = tempHistory.pop();\n      setHistory(tempHistory);\n      if (tempArray !== undefined) setGameArray(tempArray);\n    }\n  }\n\n  /**\n   * On Click Erase,\n   * try to delete the cell.\n   */\n  function onClickErase() {\n    if (cellSelected !== -1 && gameArray[cellSelected] !== \"0\") {\n      _fillCell(cellSelected, \"0\");\n    }\n  }\n\n  /**\n   * On Click Hint,\n   * fill the selected cell if its empty or wrong number is filled.\n   */\n  function onClickHint() {\n    if (cellSelected !== -1) {\n      _fillCell(cellSelected, solvedArray[cellSelected]);\n    }\n  }\n  function onClickPause() {\n    setPaused(!paused);\n  }\n\n  /**\n   * Toggle Mistakes Mode\n   */\n  function onClickMistakesMode() {\n    setMistakesMode(!mistakesMode);\n  }\n\n  /**\n   * Toggle Fast Mode\n   */\n  function onClickFastMode() {\n    if (fastMode) {\n      setNumberSelected(\"0\");\n    }\n    setCellSelected(-1);\n    setFastMode(!fastMode);\n  }\n\n  /**\n   * Close the overlay on Click.\n   */\n  function onClickOverlay() {\n    setOverlay(false);\n    _createNewGame();\n  }\n\n  /**\n   * On load, create a New Game.\n   */\n  useEffect(() => {\n    _createNewGame();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <div className={overlay ? \"container blur\" : \"container\"}>\n        <Header onClick={onClickNewGame} />\n        <div className=\"innercontainer\">\n          <GameSection\n            onClick={(indexOfArray: number) => onClickCell(indexOfArray)}\n          />\n          <StatusSection\n            onClickNumber={(number: string) => onClickNumber(number)}\n            onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n              onChangeDifficulty(e)\n            }\n            onClickUndo={onClickUndo}\n            onClickErase={onClickErase}\n            onClickHint={onClickHint}\n            onClickMistakesMode={onClickMistakesMode}\n            onClickFastMode={onClickFastMode}\n          />\n        </div>\n        <Footer />\n      </div>\n      <div\n        className={overlay ? \"overlay overlay--visible\" : \"overlay\"}\n        onClick={onClickOverlay}\n      >\n        <h2 className=\"overlay__text\">\n          You <span className=\"overlay__textspan1\">solved</span>{\" \"}\n          <span className=\"overlay__textspan2\">it!</span>\n        </h2>\n      </div>\n    </>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}