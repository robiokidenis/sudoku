{"ast":null,"code":"import _toConsumableArray from\"/Users/robiokidenis/Projects/Game/sudoku-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/robiokidenis/Projects/Game/sudoku-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";/**\n *  This file gets the solved sudoku from 'sudoku.js' and\n * generates a unique sudoku position from it.\n *\n *  Initially, I tried the sudokus generated by 'sudoku.js'. But\n * it didnt handle the difficulty properly. An 'Easy' sudoku is\n * not that easy, and can be quite hard sometimes! And, filling\n * is uneven. Sometimes, entire rows/columns/boxes are filled!\n *\n *  The 'sudoku.js' code is untouched, except for the minimal\n * changes required to import it here.\n *\n *  The 'sudoku.js' javascript library by robatron is at\n * https://github.com/robatron/sudoku.js . All credits to\n * robatron for taking the hustle out of creating valid sudokus!\n *\n *  My code in this module builds on his code! This wouldn't\n * be possible without people like him sharing in the\n * open source community!\n */import{getSudoku}from'./sudoku';/**\n * The Sudoku position is 9x9.\n *    A1 A2 A3 A4 A5 A6 A7 A8 A9\n *    B1 B2 B3 B4 B5 B6 B7 B8 B9\n *    C1 C2 C3 C4 C5 C6 C7 C8 C9\n *    D1 D2 D3 D4 D5 D6 D7 D8 D9\n *    E1 E2 E3 E4 E5 E6 E7 E8 E9\n *    F1 F2 F3 F4 F5 F6 F7 F8 F9\n *    G1 G2 G3 G4 G5 G6 G7 G8 G9\n *    H1 H2 H3 H4 H5 H6 H7 H8 H9\n *    I1 I2 I3 I4 I5 I6 I7 I8 I9\n *\n * It can be considered to be comprised of 9 boxes\n * each, stacked in a 3x3 formation.\n * Like this: Box1 Box2 Box3\n *            Box4 Box5 Box6\n *            Box7 Box8 Box9\n *\n * In turn, each box is comprised of 9 cells stacked\n * in a 3x3 formation as above. This gives us the below\n * representation:\n *      Box1        Box2        Box3\n *    A1 A2 A3    A4 A5 A6    A7 A8 A9\n *    B1 B2 B3    B4 B5 B6    B7 B8 B9\n *    C1 C2 C3    C4 C5 C6    C7 C8 C9\n *      Box4        Box5        Box6\n *    D1 D2 D3    D4 D5 D6    D7 D8 D9\n *    E1 E2 E3    E4 E5 E6    E7 E8 E9\n *    F1 F2 F3    F4 F5 F6    F7 F8 F9\n *      Box7        Box8        Box9\n *    G1 G2 G3    G4 G5 G6    G7 G8 G9\n *    H1 H2 H3    H4 H5 H6    H7 H8 H9\n *    I1 I2 I3    I4 I5 I6    I7 I8 I9\n *\n * For example, Box1 has the following cells:\n * Box1: A1 A2 A3\n *       B1 B2 B3\n *       C1 C2 C3\n *\n * So in Box1,\n *    Cell1: A1   Cell2: A2   Cell3: A3\n *    Cell4: B1   Cell5: B2   Cell6: B3\n *    Cell7: C1   Cell8: C2   Cell9: C3\n *\n * and in Box8,\n *    Cell1: G4   Cell2: G5   Cell3: G6\n *    Cell4: H4   Cell5: H5   Cell6: H6\n *    Cell7: I4   Cell8: I5   Cell9: I6\n *\n * and so on...\n */ /**\n * Initializes a null array for easier resets in the code.\n */var nullArray=['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'];/**\n * Gets the coordinates of the center cell of the specified box.\n */function _getBoxCenter(box){// eslint-disable-next-line\nswitch(box){case 0:return[1,1];case 1:return[1,4];case 2:return[1,7];case 3:return[4,1];case 4:return[4,4];case 5:return[4,7];case 6:return[7,1];case 7:return[7,4];default:return[7,7];}}/**\n * Gets the index of cell given:\n * 1. Box\n * 2. Cell\n */function _getIndexOfCell(box,cell){var _getBoxCenter2=_getBoxCenter(box),_getBoxCenter3=_slicedToArray(_getBoxCenter2,2),row=_getBoxCenter3[0],column=_getBoxCenter3[1];// eslint-disable-next-line\nswitch(cell){case 0:{row--;column--;break;}case 1:{row--;break;}case 2:{row--;column++;break;}case 3:{column--;break;}case 4:{break;}case 5:{column++;break;}case 6:{row++;column--;break;}case 7:{row++;break;}case 8:{row++;column++;break;}}return row*9+column;}/**\n * Checks if Cell is available or not (i.e., filled).\n */function _cellAvailable(tempInitArray,box,value){return tempInitArray[_getIndexOfCell(box,value)]==='0'?0:1;}/**\n * Generates a Unique Sudoku puzzle from a solved Sudoku.\n */function _generateUniqueSudoku(solvedArray,difficulty,e){var currentDifficulty=difficulty;var minimumCells,maximumCells,totalCells,box,cell;var tempInitArray=nullArray.slice();var boxCounts=[0,0,0,0,0,0,0,0,0];var boxesAvailable=[];var cellsAvailable=[];if(e)currentDifficulty=e.target.value;if(currentDifficulty==='Easy'){minimumCells=3;maximumCells=7;totalCells=45;}else if(currentDifficulty==='Medium'){minimumCells=2;maximumCells=6;totalCells=40;}else{minimumCells=1;maximumCells=5;totalCells=30;}for(var j=0;j<9;j++){boxCounts[j]=_cellAvailable(tempInitArray,j,0)+_cellAvailable(tempInitArray,j,1)+_cellAvailable(tempInitArray,j,2)+_cellAvailable(tempInitArray,j,3)+_cellAvailable(tempInitArray,j,4)+_cellAvailable(tempInitArray,j,5)+_cellAvailable(tempInitArray,j,6)+_cellAvailable(tempInitArray,j,7)+_cellAvailable(tempInitArray,j,8);}for(var i=0;i<totalCells;i++){boxesAvailable=[];for(var _j=0;_j<9;_j++){if(boxCounts[_j]<minimumCells){boxesAvailable.push(_j);}}if(boxesAvailable){for(var _j2=0;_j2<9;_j2++){if(boxCounts[_j2]<maximumCells){boxesAvailable.push(_j2);}}}box=boxesAvailable[Math.random()*boxesAvailable.length|0];cellsAvailable=[];for(var _j3=0;_j3<9;_j3++){if(tempInitArray[_getIndexOfCell(box,_j3)]==='0'){cellsAvailable.push(_j3);}}cell=cellsAvailable[Math.random()*cellsAvailable.length|0];var index=_getIndexOfCell(box,cell);tempInitArray[index]=solvedArray[index];boxCounts[box]++;}return tempInitArray;}export var getUniqueSudoku=function getUniqueSudoku(difficulty,e){var temporaryInitArray=nullArray.slice();var temporarySolvedArray=nullArray.slice();var sudoku=getSudoku();/**\n   * Get Sudoku from sudoku.js\n   */var str=sudoku.generate(60);_toConsumableArray(str).forEach(function(value,index){temporaryInitArray[index]=value==='.'?'0':value;});/**\n   * Get the solution from sudoku.js\n   */str=sudoku.solve(str);_toConsumableArray(str).forEach(function(value,index){temporarySolvedArray[index]=value;});/**\n   * Pass the generated solution and get a unique Sudoku from it!\n   */temporaryInitArray=_generateUniqueSudoku(temporarySolvedArray,difficulty,e);return[temporaryInitArray,temporarySolvedArray];};","map":{"version":3,"names":["getSudoku","nullArray","_getBoxCenter","box","_getIndexOfCell","cell","row","column","_cellAvailable","tempInitArray","value","_generateUniqueSudoku","solvedArray","difficulty","e","currentDifficulty","minimumCells","maximumCells","totalCells","slice","boxCounts","boxesAvailable","cellsAvailable","target","j","i","push","Math","random","length","index","getUniqueSudoku","temporaryInitArray","temporarySolvedArray","sudoku","str","generate","forEach","solve"],"sources":["/Users/robiokidenis/Projects/Game/sudoku-react/src/solver/UniqueSudoku.tsx"],"sourcesContent":["/**\n *  This file gets the solved sudoku from 'sudoku.js' and\n * generates a unique sudoku position from it.\n *\n *  Initially, I tried the sudokus generated by 'sudoku.js'. But\n * it didnt handle the difficulty properly. An 'Easy' sudoku is\n * not that easy, and can be quite hard sometimes! And, filling\n * is uneven. Sometimes, entire rows/columns/boxes are filled!\n *\n *  The 'sudoku.js' code is untouched, except for the minimal\n * changes required to import it here.\n *\n *  The 'sudoku.js' javascript library by robatron is at\n * https://github.com/robatron/sudoku.js . All credits to\n * robatron for taking the hustle out of creating valid sudokus!\n *\n *  My code in this module builds on his code! This wouldn't\n * be possible without people like him sharing in the\n * open source community!\n */\nimport { getSudoku } from './sudoku';\n\n/**\n * The Sudoku position is 9x9.\n *    A1 A2 A3 A4 A5 A6 A7 A8 A9\n *    B1 B2 B3 B4 B5 B6 B7 B8 B9\n *    C1 C2 C3 C4 C5 C6 C7 C8 C9\n *    D1 D2 D3 D4 D5 D6 D7 D8 D9\n *    E1 E2 E3 E4 E5 E6 E7 E8 E9\n *    F1 F2 F3 F4 F5 F6 F7 F8 F9\n *    G1 G2 G3 G4 G5 G6 G7 G8 G9\n *    H1 H2 H3 H4 H5 H6 H7 H8 H9\n *    I1 I2 I3 I4 I5 I6 I7 I8 I9\n *\n * It can be considered to be comprised of 9 boxes\n * each, stacked in a 3x3 formation.\n * Like this: Box1 Box2 Box3\n *            Box4 Box5 Box6\n *            Box7 Box8 Box9\n *\n * In turn, each box is comprised of 9 cells stacked\n * in a 3x3 formation as above. This gives us the below\n * representation:\n *      Box1        Box2        Box3\n *    A1 A2 A3    A4 A5 A6    A7 A8 A9\n *    B1 B2 B3    B4 B5 B6    B7 B8 B9\n *    C1 C2 C3    C4 C5 C6    C7 C8 C9\n *      Box4        Box5        Box6\n *    D1 D2 D3    D4 D5 D6    D7 D8 D9\n *    E1 E2 E3    E4 E5 E6    E7 E8 E9\n *    F1 F2 F3    F4 F5 F6    F7 F8 F9\n *      Box7        Box8        Box9\n *    G1 G2 G3    G4 G5 G6    G7 G8 G9\n *    H1 H2 H3    H4 H5 H6    H7 H8 H9\n *    I1 I2 I3    I4 I5 I6    I7 I8 I9\n *\n * For example, Box1 has the following cells:\n * Box1: A1 A2 A3\n *       B1 B2 B3\n *       C1 C2 C3\n *\n * So in Box1,\n *    Cell1: A1   Cell2: A2   Cell3: A3\n *    Cell4: B1   Cell5: B2   Cell6: B3\n *    Cell7: C1   Cell8: C2   Cell9: C3\n *\n * and in Box8,\n *    Cell1: G4   Cell2: G5   Cell3: G6\n *    Cell4: H4   Cell5: H5   Cell6: H6\n *    Cell7: I4   Cell8: I5   Cell9: I6\n *\n * and so on...\n */\n\n/**\n * Initializes a null array for easier resets in the code.\n */\nlet nullArray = [ '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                  '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                  '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                  '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                  '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                  '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                  '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                  '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                  '0', '0', '0', '0', '0', '0', '0', '0', '0' ];\n\n/**\n * Gets the coordinates of the center cell of the specified box.\n */\nfunction _getBoxCenter(box: number) {\n  // eslint-disable-next-line\n  switch(box) {\n    case 0: return [1,1];\n    case 1: return [1,4];\n    case 2: return [1,7];\n    case 3: return [4,1];\n    case 4: return [4,4];\n    case 5: return [4,7];\n    case 6: return [7,1];\n    case 7: return [7,4];\n    default: return [7,7];\n  }\n}\n\n/**\n * Gets the index of cell given:\n * 1. Box\n * 2. Cell\n */\nfunction _getIndexOfCell(box: number, cell: number) {\n  let [row, column] = _getBoxCenter(box);\n  // eslint-disable-next-line\n  switch(cell) {\n    case 0: {row--; column--; break;}\n    case 1: {row--; break;}\n    case 2: {row--; column++; break;}\n    case 3: {column--; break;}\n    case 4: {break;}\n    case 5: {column++; break;}\n    case 6: {row++; column--; break;}\n    case 7: {row++; break;}\n    case 8: {row++; column++; break;}\n  }\n  return row * 9 + column;\n}\n\n/**\n * Checks if Cell is available or not (i.e., filled).\n */\nfunction _cellAvailable(tempInitArray: string[], box: number, value: number) {\n  return tempInitArray[_getIndexOfCell(box, value)] === '0' ? 0 : 1;\n}\n\n/**\n * Generates a Unique Sudoku puzzle from a solved Sudoku.\n */\nfunction _generateUniqueSudoku(solvedArray: string[], difficulty: string, e?: React.ChangeEvent<HTMLSelectElement>) {\n  let currentDifficulty = difficulty;\n  let minimumCells, maximumCells, totalCells, box, cell;\n\n  let tempInitArray = nullArray.slice();\n  let boxCounts = [ 0,0,0,\n                    0,0,0,\n                    0,0,0 ];\n  let boxesAvailable = [];\n  let cellsAvailable = [];\n\n  if (e)\n    currentDifficulty = e.target.value;\n\n  if (currentDifficulty === 'Easy') {\n    minimumCells = 3;\n    maximumCells = 7;\n    totalCells = 45;\n  }\n  else if (currentDifficulty === 'Medium') {\n    minimumCells = 2;\n    maximumCells = 6;\n    totalCells = 40;\n  }\n  else {\n    minimumCells = 1;\n    maximumCells = 5;\n    totalCells = 30;\n  }\n\n  for (let j = 0; j < 9; j++) {\n    boxCounts[j] =  _cellAvailable(tempInitArray, j, 0) +\n                    _cellAvailable(tempInitArray, j, 1) +\n                    _cellAvailable(tempInitArray, j, 2) +\n                    _cellAvailable(tempInitArray, j, 3) +\n                    _cellAvailable(tempInitArray, j, 4) +\n                    _cellAvailable(tempInitArray, j, 5) +\n                    _cellAvailable(tempInitArray, j, 6) +\n                    _cellAvailable(tempInitArray, j, 7) +\n                    _cellAvailable(tempInitArray, j, 8);\n  }\n\n  for (let i = 0; i < totalCells; i++) {\n    boxesAvailable = [];\n    for (let j = 0; j < 9; j++) {\n      if (boxCounts[j] < minimumCells) {\n        boxesAvailable.push(j);\n      }\n    }\n    if (boxesAvailable) {\n      for (let j = 0; j < 9; j++) {\n        if (boxCounts[j] < maximumCells) {\n          boxesAvailable.push(j);\n        }\n      }\n    }\n    box = boxesAvailable[Math.random() * boxesAvailable.length | 0];\n\n    cellsAvailable = [];\n    for (let j = 0; j < 9; j++) {\n      if ( tempInitArray[_getIndexOfCell(box, j)] === '0') {\n        cellsAvailable.push(j);\n      }\n    }\n    cell = cellsAvailable[Math.random() * cellsAvailable.length | 0];\n\n    let index = _getIndexOfCell(box, cell);\n    tempInitArray[index] = solvedArray[index]\n    boxCounts[box]++;\n  }\n\n  return tempInitArray;\n}\n\nexport const getUniqueSudoku = (difficulty: string, e?: React.ChangeEvent<HTMLSelectElement>) => {\n  let temporaryInitArray = nullArray.slice();\n  let temporarySolvedArray = nullArray.slice();\n  let sudoku = getSudoku();\n\n  /**\n   * Get Sudoku from sudoku.js\n   */\n  let str = sudoku.generate(60);\n\n  [...str].forEach((value, index) => {\n    temporaryInitArray[index] = value === '.'\n                        ? '0'\n                        : value;\n  });\n\n  /**\n   * Get the solution from sudoku.js\n   */\n  str = sudoku.solve(str);\n  [...str].forEach((value, index) => {\n    temporarySolvedArray[index] = value;\n  });\n\n  /**\n   * Pass the generated solution and get a unique Sudoku from it!\n   */\n  temporaryInitArray = _generateUniqueSudoku(temporarySolvedArray, difficulty, e);\n\n  return [temporaryInitArray, temporarySolvedArray];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}