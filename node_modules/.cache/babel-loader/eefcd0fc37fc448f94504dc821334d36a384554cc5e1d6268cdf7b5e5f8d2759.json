{"ast":null,"code":"/*\n    Sudoku.js\n    ---------\n\n    A Sudoku puzzle generator and solver JavaScript library.\n\n    Please see the README for more details.\n*/\n\n//(function(root){\n//var sudoku = root.sudoku = {};  // Global reference to the sudoku library\nvar sudoku = {};\nsudoku.DIGITS = \"123456789\"; // Allowed sudoku.DIGITS\nvar ROWS = \"ABCDEFGHI\"; // Row lables\nvar COLS = sudoku.DIGITS; // Column lables\nvar SQUARES = null; // Square IDs\n\nvar UNITS = null; // All units (row, column, or box)\nvar SQUARE_UNITS_MAP = null; // Squares -> units map\nvar SQUARE_PEERS_MAP = null; // Squares -> peers map\n\nvar MIN_GIVENS = 17; // Minimum number of givens\nvar NR_SQUARES = 81; // Number of squares\n\n// Define difficulties by how many squares are given to the player in a new\n// puzzle.\nvar DIFFICULTY = {\n  \"easy\": 62,\n  \"medium\": 53,\n  \"hard\": 44,\n  \"very-hard\": 35,\n  \"insane\": 26,\n  \"inhuman\": 17\n};\n\n// Blank character and board representation\nsudoku.BLANK_CHAR = '.';\nsudoku.BLANK_BOARD = \"....................................................\" + \".............................\";\n\n// Init\n// -------------------------------------------------------------------------\nfunction initialize() {\n  /* Initialize the Sudoku library (invoked after library load)\n  */\n  SQUARES = sudoku._cross(ROWS, COLS);\n  UNITS = sudoku._get_all_units(ROWS, COLS);\n  SQUARE_UNITS_MAP = sudoku._get_square_units_map(SQUARES, UNITS);\n  SQUARE_PEERS_MAP = sudoku._get_square_peers_map(SQUARES, SQUARE_UNITS_MAP);\n}\n\n// Generate\n// -------------------------------------------------------------------------\nsudoku.generate = function (difficulty, unique) {\n  /* Generate a new Sudoku puzzle of a particular `difficulty`, e.g.,\n       // Generate an \"easy\" sudoku puzzle\n      sudoku.generate(\"easy\");\n    Difficulties are as follows, and represent the number of given squares:\n           \"easy\":         61\n          \"medium\":       52\n          \"hard\":         43\n          \"very-hard\":    34\n          \"insane\":       25\n          \"inhuman\":      17\n    You may also enter a custom number of squares to be given, e.g.,\n       // Generate a new Sudoku puzzle with 60 given squares\n      sudoku.generate(60)\n    `difficulty` must be a number between 17 and 81 inclusive. If it's\n  outside of that range, `difficulty` will be set to the closest bound,\n  e.g., 0 -> 17, and 100 -> 81.\n    By default, the puzzles are unique, uless you set `unique` to false.\n  (Note: Puzzle uniqueness is not yet implemented, so puzzles are *not*\n  guaranteed to have unique solutions)\n   TODO: Implement puzzle uniqueness\n  */\n\n  // If `difficulty` is a string or undefined, convert it to a number or\n  // default it to \"easy\" if undefined.\n  if (typeof difficulty === \"string\" || typeof difficulty === \"undefined\") {\n    difficulty = DIFFICULTY[difficulty] || DIFFICULTY.easy;\n  }\n\n  // Force difficulty between 17 and 81 inclusive\n  difficulty = sudoku._force_range(difficulty, NR_SQUARES + 1, MIN_GIVENS);\n\n  // Default unique to true\n  unique = unique || true;\n\n  // Get a set of squares and all possible candidates for each square\n  var blank_board = \"\";\n  for (var i = 0; i < NR_SQUARES; ++i) {\n    blank_board += '.';\n  }\n  var candidates = sudoku._get_candidates_map(blank_board);\n\n  // For each item in a shuffled list of squares\n  var shuffled_squares = sudoku._shuffle(SQUARES);\n  for (var si in shuffled_squares) {\n    var square = shuffled_squares[si];\n\n    // If an assignment of a random chioce causes a contradictoin, give\n    // up and try again\n    var rand_candidate_idx = sudoku._rand_range(candidates[square].length);\n    var rand_candidate = candidates[square][rand_candidate_idx];\n    if (!sudoku._assign(candidates, square, rand_candidate)) {\n      break;\n    }\n\n    // Make a list of all single candidates\n    var single_candidates = [];\n    for (si in SQUARES) {\n      square = SQUARES[si];\n      if (candidates[square].length === 1) {\n        single_candidates.push(candidates[square]);\n      }\n    }\n\n    // If we have at least difficulty, and the unique candidate count is\n    // at least 8, return the puzzle!\n    if (single_candidates.length >= difficulty && sudoku._strip_dups(single_candidates).length >= 8) {\n      var board = \"\";\n      var givens_idxs = [];\n      for (i in SQUARES) {\n        square = SQUARES[i];\n        if (candidates[square].length === 1) {\n          board += candidates[square];\n          givens_idxs.push(i);\n        } else {\n          board += sudoku.BLANK_CHAR;\n        }\n      }\n\n      // If we have more than `difficulty` givens, remove some random\n      // givens until we're down to exactly `difficulty`\n      var nr_givens = givens_idxs.length;\n      if (nr_givens > difficulty) {\n        givens_idxs = sudoku._shuffle(givens_idxs);\n        for (i = 0; i < nr_givens - difficulty; ++i) {\n          var target = parseInt(givens_idxs[i]);\n          board = board.substr(0, target) + sudoku.BLANK_CHAR + board.substr(target + 1);\n        }\n      }\n\n      // Double check board is solvable\n      // TODO: Make a standalone board checker. Solve is expensive.\n      if (sudoku.solve(board)) {\n        return board;\n      }\n    }\n  }\n\n  // Give up and try a new puzzle\n  return sudoku.generate(difficulty);\n};\n\n// Solve\n// -------------------------------------------------------------------------\nsudoku.solve = function (board, reverse) {\n  /* Solve a sudoku puzzle given a sudoku `board`, i.e., an 81-character\n  string of sudoku.DIGITS, 1-9, and spaces identified by '.', representing the\n  squares. There must be a minimum of 17 givens. If the given board has no\n  solutions, return false.\n   Optionally set `reverse` to solve \"backwards\", i.e., rotate through the\n  possibilities in reverse. Useful for checking if there is more than one\n  solution.\n  */\n\n  // Assure a valid board\n  var report = sudoku.validate_board(board);\n  if (report !== true) {\n    throw report;\n  }\n\n  // Check number of givens is at least MIN_GIVENS\n  var nr_givens = 0;\n  for (var i in board) {\n    if (board[i] !== sudoku.BLANK_CHAR && sudoku._in(board[i], sudoku.DIGITS)) {\n      ++nr_givens;\n    }\n  }\n  if (nr_givens < MIN_GIVENS) {\n    // eslint-disable-next-line\n    throw \"Too few givens. Minimum givens is \" + MIN_GIVENS;\n  }\n\n  // Default reverse to false\n  reverse = reverse || false;\n  var candidates = sudoku._get_candidates_map(board);\n  var result = sudoku._search(candidates, reverse);\n  if (result) {\n    var solution = \"\";\n    for (var square in result) {\n      solution += result[square];\n    }\n    return solution;\n  }\n  return false;\n};\nsudoku.get_candidates = function (board) {\n  /* Return all possible candidatees for each square as a grid of\n  candidates, returnning `false` if a contradiction is encountered.\n   Really just a wrapper for sudoku._get_candidates_map for programmer\n  consumption.\n  */\n\n  // Assure a valid board\n  var report = sudoku.validate_board(board);\n  if (report !== true) {\n    throw report;\n  }\n\n  // Get a candidates map\n  var candidates_map = sudoku._get_candidates_map(board);\n\n  // If there's an error, return false\n  if (!candidates_map) {\n    return false;\n  }\n\n  // Transform candidates map into grid\n  var rows = [];\n  var cur_row = [];\n  var i = 0;\n  for (var square in candidates_map) {\n    var candidates = candidates_map[square];\n    cur_row.push(candidates);\n    if (i % 9 === 8) {\n      rows.push(cur_row);\n      cur_row = [];\n    }\n    ++i;\n  }\n  return rows;\n};\nsudoku._get_candidates_map = function (board) {\n  /* Get all possible candidates for each square as a map in the form\n  {square: sudoku.DIGITS} using recursive constraint propagation. Return `false`\n  if a contradiction is encountered\n  */\n\n  // Assure a valid board\n  var report = sudoku.validate_board(board);\n  if (report !== true) {\n    throw report;\n  }\n  var candidate_map = {};\n  var squares_values_map = sudoku._get_square_vals_map(board);\n\n  // Start by assigning every digit as a candidate to every square\n  for (var si in SQUARES) {\n    candidate_map[SQUARES[si]] = sudoku.DIGITS;\n  }\n\n  // For each non-blank square, assign its value in the candidate map and\n  // propigate.\n  for (var square in squares_values_map) {\n    var val = squares_values_map[square];\n    if (sudoku._in(val, sudoku.DIGITS)) {\n      var new_candidates = sudoku._assign(candidate_map, square, val);\n\n      // Fail if we can't assign val to square\n      if (!new_candidates) {\n        return false;\n      }\n    }\n  }\n  return candidate_map;\n};\nsudoku._search = function (candidates, reverse) {\n  /* Given a map of squares -> candiates, using depth-first search,\n  recursively try all possible values until a solution is found, or false\n  if no solution exists.\n  */\n\n  // Return if error in previous iteration\n  if (!candidates) {\n    return false;\n  }\n\n  // Default reverse to false\n  reverse = reverse || false;\n\n  // If only one candidate for every square, we've a solved puzzle!\n  // Return the candidates map.\n  var max_nr_candidates = 0;\n  // eslint-disable-next-line\n  var max_candidates_square = null;\n  for (var si in SQUARES) {\n    var square = SQUARES[si];\n    var nr_candidates = candidates[square].length;\n    if (nr_candidates > max_nr_candidates) {\n      max_nr_candidates = nr_candidates;\n      // eslint-disable-next-line no-unused-vars\n      max_candidates_square = square;\n    }\n  }\n  if (max_nr_candidates === 1) {\n    return candidates;\n  }\n\n  // Choose the blank square with the fewest possibilities > 1\n  var min_nr_candidates = 10;\n  var min_candidates_square = null;\n  for (si in SQUARES) {\n    square = SQUARES[si];\n    nr_candidates = candidates[square].length;\n    if (nr_candidates < min_nr_candidates && nr_candidates > 1) {\n      min_nr_candidates = nr_candidates;\n      min_candidates_square = square;\n    }\n  }\n\n  // Recursively search through each of the candidates of the square\n  // starting with the one with fewest candidates.\n\n  // Rotate through the candidates forwards\n  var min_candidates = candidates[min_candidates_square];\n  if (!reverse) {\n    for (var vi in min_candidates) {\n      var val = min_candidates[vi];\n\n      // TODO: Implement a non-rediculous deep copy function\n      var candidates_copy = JSON.parse(JSON.stringify(candidates));\n      var candidates_next = sudoku._search(sudoku._assign(candidates_copy, min_candidates_square, val));\n      if (candidates_next) {\n        return candidates_next;\n      }\n    }\n\n    // Rotate through the candidates backwards\n  } else {\n    for (vi = min_candidates.length - 1; vi >= 0; --vi) {\n      val = min_candidates[vi];\n\n      // TODO: Implement a non-rediculous deep copy function\n      candidates_copy = JSON.parse(JSON.stringify(candidates));\n      candidates_next = sudoku._search(sudoku._assign(candidates_copy, min_candidates_square, val), reverse);\n      if (candidates_next) {\n        return candidates_next;\n      }\n    }\n  }\n\n  // If we get through all combinations of the square with the fewest\n  // candidates without finding an answer, there isn't one. Return false.\n  return false;\n};\nsudoku._assign = function (candidates, square, val) {\n  /* Eliminate all values, *except* for `val`, from `candidates` at\n  `square` (candidates[square]), and propagate. Return the candidates map\n  when finished. If a contradiciton is found, return false.\n   WARNING: This will modify the contents of `candidates` directly.\n  */\n\n  // Grab a list of canidates without 'val'\n  var other_vals = candidates[square].replace(val, \"\");\n\n  // Loop through all other values and eliminate them from the candidates\n  // at the current square, and propigate. If at any point we get a\n  // contradiction, return false.\n  for (var ovi in other_vals) {\n    var other_val = other_vals[ovi];\n    var candidates_next = sudoku._eliminate(candidates, square, other_val);\n    if (!candidates_next) {\n      //console.log(\"Contradiction found by _eliminate.\");\n      return false;\n    }\n  }\n  return candidates;\n};\nsudoku._eliminate = function (candidates, square, val) {\n  /* Eliminate `val` from `candidates` at `square`, (candidates[square]),\n  and propagate when values or places <= 2. Return updated candidates,\n  unless a contradiction is detected, in which case, return false.\n   WARNING: This will modify the contents of `candidates` directly.\n  */\n\n  // If `val` has already been eliminated from candidates[square], return\n  // with candidates.\n  if (!sudoku._in(val, candidates[square])) {\n    return candidates;\n  }\n\n  // Remove `val` from candidates[square]\n  candidates[square] = candidates[square].replace(val, '');\n\n  // If the square has only candidate left, eliminate that value from its\n  // peers\n  var nr_candidates = candidates[square].length;\n  if (nr_candidates === 1) {\n    var target_val = candidates[square];\n    for (var pi in SQUARE_PEERS_MAP[square]) {\n      var peer = SQUARE_PEERS_MAP[square][pi];\n      var candidates_new = sudoku._eliminate(candidates, peer, target_val);\n      if (!candidates_new) {\n        return false;\n      }\n    }\n\n    // Otherwise, if the square has no candidates, we have a contradiction.\n    // Return false.\n  }\n  if (nr_candidates === 0) {\n    return false;\n  }\n\n  // If a unit is reduced to only one place for a value, then assign it\n  for (var ui in SQUARE_UNITS_MAP[square]) {\n    var unit = SQUARE_UNITS_MAP[square][ui];\n    var val_places = [];\n    for (var si in unit) {\n      var unit_square = unit[si];\n      if (sudoku._in(val, candidates[unit_square])) {\n        val_places.push(unit_square);\n      }\n    }\n\n    // If there's no place for this value, we have a contradition!\n    // return false\n    if (val_places.length === 0) {\n      return false;\n\n      // Otherwise the value can only be in one place. Assign it there.\n    } else if (val_places.length === 1) {\n      candidates_new = sudoku._assign(candidates, val_places[0], val);\n      if (!candidates_new) {\n        return false;\n      }\n    }\n  }\n  return candidates;\n};\n\n// Square relationships\n// -------------------------------------------------------------------------\n// Squares, and their relationships with values, units, and peers.\n\nsudoku._get_square_vals_map = function (board) {\n  /* Return a map of squares -> values\n  */\n  var squares_vals_map = {};\n\n  // Make sure `board` is a string of length 81\n  if (board.length !== SQUARES.length) {\n    // eslint-disable-next-line\n    throw \"Board/squares length mismatch.\";\n  } else {\n    for (var i in SQUARES) {\n      squares_vals_map[SQUARES[i]] = board[i];\n    }\n  }\n  return squares_vals_map;\n};\nsudoku._get_square_units_map = function (squares, units) {\n  /* Return a map of `squares` and their associated units (row, col, box)\n  */\n  var square_unit_map = {};\n\n  // For every square...\n  for (var si in squares) {\n    var cur_square = squares[si];\n\n    // Maintain a list of the current square's units\n    var cur_square_units = [];\n\n    // Look through the units, and see if the current square is in it,\n    // and if so, add it to the list of of the square's units.\n    for (var ui in units) {\n      var cur_unit = units[ui];\n      if (cur_unit.indexOf(cur_square) !== -1) {\n        cur_square_units.push(cur_unit);\n      }\n    }\n\n    // Save the current square and its units to the map\n    square_unit_map[cur_square] = cur_square_units;\n  }\n  return square_unit_map;\n};\nsudoku._get_square_peers_map = function (squares, units_map) {\n  /* Return a map of `squares` and their associated peers, i.e., a set of\n  other squares in the square's unit.\n  */\n  var square_peers_map = {};\n\n  // For every square...\n  for (var si in squares) {\n    var cur_square = squares[si];\n    var cur_square_units = units_map[cur_square];\n\n    // Maintain list of the current square's peers\n    var cur_square_peers = [];\n\n    // Look through the current square's units map...\n    for (var sui in cur_square_units) {\n      var cur_unit = cur_square_units[sui];\n      for (var ui in cur_unit) {\n        var cur_unit_square = cur_unit[ui];\n        if (cur_square_peers.indexOf(cur_unit_square) === -1 && cur_unit_square !== cur_square) {\n          cur_square_peers.push(cur_unit_square);\n        }\n      }\n    }\n\n    // Save the current square an its associated peers to the map\n    square_peers_map[cur_square] = cur_square_peers;\n  }\n  return square_peers_map;\n};\nsudoku._get_all_units = function (rows, cols) {\n  /* Return a list of all units (rows, cols, boxes)\n  */\n  var units = [];\n\n  // Rows\n  for (var ri in rows) {\n    units.push(sudoku._cross(rows[ri], cols));\n  }\n\n  // Columns\n  for (var ci in cols) {\n    units.push(sudoku._cross(rows, cols[ci]));\n  }\n\n  // Boxes\n  var row_squares = [\"ABC\", \"DEF\", \"GHI\"];\n  var col_squares = [\"123\", \"456\", \"789\"];\n  for (var rsi in row_squares) {\n    for (var csi in col_squares) {\n      units.push(sudoku._cross(row_squares[rsi], col_squares[csi]));\n    }\n  }\n  return units;\n};\n\n// Conversions\n// -------------------------------------------------------------------------\nsudoku.board_string_to_grid = function (board_string) {\n  /* Convert a board string to a two-dimensional array\n  */\n  var rows = [];\n  var cur_row = [];\n  for (var i in board_string) {\n    cur_row.push(board_string[i]);\n    if (i % 9 === 8) {\n      rows.push(cur_row);\n      cur_row = [];\n    }\n  }\n  return rows;\n};\nsudoku.board_grid_to_string = function (board_grid) {\n  /* Convert a board grid to a string\n  */\n  var board_string = \"\";\n  for (var r = 0; r < 9; ++r) {\n    for (var c = 0; c < 9; ++c) {\n      board_string += board_grid[r][c];\n    }\n  }\n  return board_string;\n};\n\n// Utility\n// -------------------------------------------------------------------------\n\nsudoku.print_board = function (board) {\n  /* Print a sudoku `board` to the console.\n  */\n\n  // Assure a valid board\n  var report = sudoku.validate_board(board);\n  if (report !== true) {\n    throw report;\n  }\n  var V_PADDING = \" \"; // Insert after each square\n  var H_PADDING = '\\n'; // Insert after each row\n\n  var V_BOX_PADDING = \"  \"; // Box vertical padding\n  var H_BOX_PADDING = '\\n'; // Box horizontal padding\n\n  var display_string = \"\";\n  for (var i in board) {\n    var square = board[i];\n\n    // Add the square and some padding\n    display_string += square + V_PADDING;\n\n    // Vertical edge of a box, insert v. box padding\n    if (i % 3 === 2) {\n      display_string += V_BOX_PADDING;\n    }\n\n    // End of a line, insert horiz. padding\n    if (i % 9 === 8) {\n      display_string += H_PADDING;\n    }\n\n    // Horizontal edge of a box, insert h. box padding\n    if (i % 27 === 26) {\n      display_string += H_BOX_PADDING;\n    }\n  }\n  console.log(display_string);\n};\nsudoku.validate_board = function (board) {\n  /* Return if the given `board` is valid or not. If it's valid, return\n  true. If it's not, return a string of the reason why it's not.\n  */\n\n  // Check for empty board\n  if (!board) {\n    return \"Empty board\";\n  }\n\n  // Invalid board length\n  if (board.length !== NR_SQUARES) {\n    return \"Invalid board size. Board must be exactly \" + NR_SQUARES + \" squares.\";\n  }\n\n  // Check for invalid characters\n  for (var i in board) {\n    if (!sudoku._in(board[i], sudoku.DIGITS) && board[i] !== sudoku.BLANK_CHAR) {\n      return \"Invalid board character encountered at index \" + i + \": \" + board[i];\n    }\n  }\n\n  // Otherwise, we're good. Return true.\n  return true;\n};\nsudoku._cross = function (a, b) {\n  /* Cross product of all elements in `a` and `b`, e.g.,\n  sudoku._cross(\"abc\", \"123\") ->\n  [\"a1\", \"a2\", \"a3\", \"b1\", \"b2\", \"b3\", \"c1\", \"c2\", \"c3\"]\n  */\n  var result = [];\n  for (var ai in a) {\n    for (var bi in b) {\n      result.push(a[ai] + b[bi]);\n    }\n  }\n  return result;\n};\nsudoku._in = function (v, seq) {\n  /* Return if a value `v` is in sequence `seq`.\n  */\n  return seq.indexOf(v) !== -1;\n};\nsudoku._first_true = function (seq) {\n  /* Return the first element in `seq` that is true. If no element is\n  true, return false.\n  */\n  for (var i in seq) {\n    if (seq[i]) {\n      return seq[i];\n    }\n  }\n  return false;\n};\nsudoku._shuffle = function (seq) {\n  /* Return a shuffled version of `seq`\n  */\n\n  // Create an array of the same size as `seq` filled with false\n  var shuffled = [];\n  for (var i = 0; i < seq.length; ++i) {\n    shuffled.push(false);\n  }\n  for (i in seq) {\n    var ti = sudoku._rand_range(seq.length);\n    while (shuffled[ti]) {\n      ti = ti + 1 > seq.length - 1 ? 0 : ti + 1;\n    }\n    shuffled[ti] = seq[i];\n  }\n  return shuffled;\n};\nsudoku._rand_range = function (max, min) {\n  /* Get a random integer in the range of `min` to `max` (non inclusive).\n  If `min` not defined, default to 0. If `max` not defined, throw an\n  error.\n  */\n  min = min || 0;\n  if (max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  } else {\n    // eslint-disable-next-line\n    throw \"Range undefined\";\n  }\n};\nsudoku._strip_dups = function (seq) {\n  /* Strip duplicate values from `seq`\n  */\n  var seq_set = [];\n  var dup_map = {};\n  for (var i in seq) {\n    var e = seq[i];\n    if (!dup_map[e]) {\n      seq_set.push(e);\n      dup_map[e] = true;\n    }\n  }\n  return seq_set;\n};\nsudoku._force_range = function (nr, max, min) {\n  /* Force `nr` to be within the range from `min` to, but not including,\n  `max`. `min` is optional, and will default to 0. If `nr` is undefined,\n  treat it as zero.\n  */\n  min = min || 0;\n  nr = nr || 0;\n  if (nr < min) {\n    return min;\n  }\n  if (nr > max) {\n    return max;\n  }\n  return nr;\n};\n\n// Initialize library after load\ninitialize();\nexport const getSudoku = () => {\n  return sudoku;\n};\n\n// Pass whatever the root object is, like 'window' in browsers\n//})(this);","map":{"version":3,"names":["sudoku","DIGITS","ROWS","COLS","SQUARES","UNITS","SQUARE_UNITS_MAP","SQUARE_PEERS_MAP","MIN_GIVENS","NR_SQUARES","DIFFICULTY","BLANK_CHAR","BLANK_BOARD","initialize","_cross","_get_all_units","_get_square_units_map","_get_square_peers_map","generate","difficulty","unique","easy","_force_range","blank_board","i","candidates","_get_candidates_map","shuffled_squares","_shuffle","si","square","rand_candidate_idx","_rand_range","length","rand_candidate","_assign","single_candidates","push","_strip_dups","board","givens_idxs","nr_givens","target","parseInt","substr","solve","reverse","report","validate_board","_in","result","_search","solution","get_candidates","candidates_map","rows","cur_row","candidate_map","squares_values_map","_get_square_vals_map","val","new_candidates","max_nr_candidates","max_candidates_square","nr_candidates","min_nr_candidates","min_candidates_square","min_candidates","vi","candidates_copy","JSON","parse","stringify","candidates_next","other_vals","replace","ovi","other_val","_eliminate","target_val","pi","peer","candidates_new","ui","unit","val_places","unit_square","squares_vals_map","squares","units","square_unit_map","cur_square","cur_square_units","cur_unit","indexOf","units_map","square_peers_map","cur_square_peers","sui","cur_unit_square","cols","ri","ci","row_squares","col_squares","rsi","csi","board_string_to_grid","board_string","board_grid_to_string","board_grid","r","c","print_board","V_PADDING","H_PADDING","V_BOX_PADDING","H_BOX_PADDING","display_string","console","log","a","b","ai","bi","v","seq","_first_true","shuffled","ti","max","min","Math","floor","random","seq_set","dup_map","e","nr","getSudoku"],"sources":["/Users/robiokidenis/Projects/Game/sudoku-react/src/solver/sudoku.js"],"sourcesContent":["/*\n    Sudoku.js\n    ---------\n\n    A Sudoku puzzle generator and solver JavaScript library.\n\n    Please see the README for more details.\n*/\n\n//(function(root){\n    //var sudoku = root.sudoku = {};  // Global reference to the sudoku library\n    var sudoku = {};\n    sudoku.DIGITS = \"123456789\";    // Allowed sudoku.DIGITS\n    var ROWS = \"ABCDEFGHI\";         // Row lables\n    var COLS = sudoku.DIGITS;       // Column lables\n    var SQUARES = null;             // Square IDs\n\n    var UNITS = null;               // All units (row, column, or box)\n    var SQUARE_UNITS_MAP = null;    // Squares -> units map\n    var SQUARE_PEERS_MAP = null;    // Squares -> peers map\n\n    var MIN_GIVENS = 17;            // Minimum number of givens\n    var NR_SQUARES = 81;            // Number of squares\n\n    // Define difficulties by how many squares are given to the player in a new\n    // puzzle.\n    var DIFFICULTY = {\n        \"easy\":         62,\n        \"medium\":       53,\n        \"hard\":         44,\n        \"very-hard\":    35,\n        \"insane\":       26,\n        \"inhuman\":      17,\n    };\n\n    // Blank character and board representation\n    sudoku.BLANK_CHAR = '.';\n    sudoku.BLANK_BOARD = \"....................................................\"+\n            \".............................\";\n\n    // Init\n    // -------------------------------------------------------------------------\n    function initialize(){\n        /* Initialize the Sudoku library (invoked after library load)\n        */\n        SQUARES             = sudoku._cross(ROWS, COLS);\n        UNITS               = sudoku._get_all_units(ROWS, COLS);\n        SQUARE_UNITS_MAP    = sudoku._get_square_units_map(SQUARES, UNITS);\n        SQUARE_PEERS_MAP    = sudoku._get_square_peers_map(SQUARES,\n                                    SQUARE_UNITS_MAP);\n    }\n\n    // Generate\n    // -------------------------------------------------------------------------\n    sudoku.generate = function(difficulty, unique){\n        /* Generate a new Sudoku puzzle of a particular `difficulty`, e.g.,\n\n            // Generate an \"easy\" sudoku puzzle\n            sudoku.generate(\"easy\");\n\n\n        Difficulties are as follows, and represent the number of given squares:\n\n                \"easy\":         61\n                \"medium\":       52\n                \"hard\":         43\n                \"very-hard\":    34\n                \"insane\":       25\n                \"inhuman\":      17\n\n\n        You may also enter a custom number of squares to be given, e.g.,\n\n            // Generate a new Sudoku puzzle with 60 given squares\n            sudoku.generate(60)\n\n\n        `difficulty` must be a number between 17 and 81 inclusive. If it's\n        outside of that range, `difficulty` will be set to the closest bound,\n        e.g., 0 -> 17, and 100 -> 81.\n\n\n        By default, the puzzles are unique, uless you set `unique` to false.\n        (Note: Puzzle uniqueness is not yet implemented, so puzzles are *not*\n        guaranteed to have unique solutions)\n\n        TODO: Implement puzzle uniqueness\n        */\n\n        // If `difficulty` is a string or undefined, convert it to a number or\n        // default it to \"easy\" if undefined.\n        if(typeof difficulty === \"string\" || typeof difficulty === \"undefined\"){\n            difficulty = DIFFICULTY[difficulty] || DIFFICULTY.easy;\n        }\n\n        // Force difficulty between 17 and 81 inclusive\n        difficulty = sudoku._force_range(difficulty, NR_SQUARES + 1,\n                MIN_GIVENS);\n\n        // Default unique to true\n        unique = unique || true;\n\n        // Get a set of squares and all possible candidates for each square\n        var blank_board = \"\";\n        for(var i = 0; i < NR_SQUARES; ++i){\n            blank_board += '.';\n        }\n        var candidates = sudoku._get_candidates_map(blank_board);\n\n        // For each item in a shuffled list of squares\n        var shuffled_squares = sudoku._shuffle(SQUARES);\n        for(var si in shuffled_squares){\n            var square = shuffled_squares[si];\n\n            // If an assignment of a random chioce causes a contradictoin, give\n            // up and try again\n            var rand_candidate_idx =\n                    sudoku._rand_range(candidates[square].length);\n            var rand_candidate = candidates[square][rand_candidate_idx];\n            if(!sudoku._assign(candidates, square, rand_candidate)){\n                break;\n            }\n\n            // Make a list of all single candidates\n            var single_candidates = [];\n            for(si in SQUARES){\n                square = SQUARES[si];\n\n                if(candidates[square].length === 1){\n                    single_candidates.push(candidates[square]);\n                }\n            }\n\n            // If we have at least difficulty, and the unique candidate count is\n            // at least 8, return the puzzle!\n            if(single_candidates.length >= difficulty &&\n                    sudoku._strip_dups(single_candidates).length >= 8){\n                var board = \"\";\n                var givens_idxs = [];\n                for(i in SQUARES){\n                    square = SQUARES[i];\n                    if(candidates[square].length === 1){\n                        board += candidates[square];\n                        givens_idxs.push(i);\n                    } else {\n                        board += sudoku.BLANK_CHAR;\n                    }\n                }\n\n                // If we have more than `difficulty` givens, remove some random\n                // givens until we're down to exactly `difficulty`\n                var nr_givens = givens_idxs.length;\n                if(nr_givens > difficulty){\n                    givens_idxs = sudoku._shuffle(givens_idxs);\n                    for(i = 0; i < nr_givens - difficulty; ++i){\n                        var target = parseInt(givens_idxs[i]);\n                        board = board.substr(0, target) + sudoku.BLANK_CHAR +\n                            board.substr(target + 1);\n                    }\n                }\n\n                // Double check board is solvable\n                // TODO: Make a standalone board checker. Solve is expensive.\n                if(sudoku.solve(board)){\n                    return board;\n                }\n            }\n        }\n\n        // Give up and try a new puzzle\n        return sudoku.generate(difficulty);\n    };\n\n    // Solve\n    // -------------------------------------------------------------------------\n    sudoku.solve = function(board, reverse){\n        /* Solve a sudoku puzzle given a sudoku `board`, i.e., an 81-character\n        string of sudoku.DIGITS, 1-9, and spaces identified by '.', representing the\n        squares. There must be a minimum of 17 givens. If the given board has no\n        solutions, return false.\n\n        Optionally set `reverse` to solve \"backwards\", i.e., rotate through the\n        possibilities in reverse. Useful for checking if there is more than one\n        solution.\n        */\n\n        // Assure a valid board\n        var report = sudoku.validate_board(board);\n        if(report !== true){\n            throw report;\n        }\n\n        // Check number of givens is at least MIN_GIVENS\n        var nr_givens = 0;\n        for(var i in board){\n            if(board[i] !== sudoku.BLANK_CHAR && sudoku._in(board[i], sudoku.DIGITS)){\n                ++nr_givens;\n            }\n        }\n        if(nr_givens < MIN_GIVENS){\n            // eslint-disable-next-line\n            throw \"Too few givens. Minimum givens is \" + MIN_GIVENS;\n        }\n\n        // Default reverse to false\n        reverse = reverse || false;\n\n        var candidates = sudoku._get_candidates_map(board);\n        var result = sudoku._search(candidates, reverse);\n\n        if(result){\n            var solution = \"\";\n            for(var square in result){\n                solution += result[square];\n            }\n            return solution;\n        }\n        return false;\n    };\n\n    sudoku.get_candidates = function(board){\n        /* Return all possible candidatees for each square as a grid of\n        candidates, returnning `false` if a contradiction is encountered.\n\n        Really just a wrapper for sudoku._get_candidates_map for programmer\n        consumption.\n        */\n\n        // Assure a valid board\n        var report = sudoku.validate_board(board);\n        if(report !== true){\n            throw report;\n        }\n\n        // Get a candidates map\n        var candidates_map = sudoku._get_candidates_map(board);\n\n        // If there's an error, return false\n        if(!candidates_map){\n            return false;\n        }\n\n        // Transform candidates map into grid\n        var rows = [];\n        var cur_row = [];\n        var i = 0;\n        for(var square in candidates_map){\n            var candidates = candidates_map[square];\n            cur_row.push(candidates);\n            if(i % 9 === 8){\n                rows.push(cur_row);\n                cur_row = [];\n            }\n            ++i;\n        }\n        return rows;\n    }\n\n    sudoku._get_candidates_map = function(board){\n        /* Get all possible candidates for each square as a map in the form\n        {square: sudoku.DIGITS} using recursive constraint propagation. Return `false`\n        if a contradiction is encountered\n        */\n\n        // Assure a valid board\n        var report = sudoku.validate_board(board);\n        if(report !== true){\n            throw report;\n        }\n\n        var candidate_map = {};\n        var squares_values_map = sudoku._get_square_vals_map(board);\n\n        // Start by assigning every digit as a candidate to every square\n        for(var si in SQUARES){\n            candidate_map[SQUARES[si]] = sudoku.DIGITS;\n        }\n\n        // For each non-blank square, assign its value in the candidate map and\n        // propigate.\n        for(var square in squares_values_map){\n            var val = squares_values_map[square];\n\n            if(sudoku._in(val, sudoku.DIGITS)){\n                var new_candidates = sudoku._assign(candidate_map, square, val);\n\n                // Fail if we can't assign val to square\n                if(!new_candidates){\n                    return false;\n                }\n            }\n        }\n\n        return candidate_map;\n    };\n\n    sudoku._search = function(candidates, reverse){\n        /* Given a map of squares -> candiates, using depth-first search,\n        recursively try all possible values until a solution is found, or false\n        if no solution exists.\n        */\n\n        // Return if error in previous iteration\n        if(!candidates){\n            return false;\n        }\n\n        // Default reverse to false\n        reverse = reverse || false;\n\n        // If only one candidate for every square, we've a solved puzzle!\n        // Return the candidates map.\n        var max_nr_candidates = 0;\n        // eslint-disable-next-line\n        var max_candidates_square = null;\n        for(var si in SQUARES){\n            var square = SQUARES[si];\n\n            var nr_candidates = candidates[square].length;\n\n            if(nr_candidates > max_nr_candidates){\n                max_nr_candidates = nr_candidates;\n                // eslint-disable-next-line no-unused-vars\n                max_candidates_square = square;\n            }\n        }\n        if(max_nr_candidates === 1){\n            return candidates;\n        }\n\n        // Choose the blank square with the fewest possibilities > 1\n        var min_nr_candidates = 10;\n        var min_candidates_square = null;\n        for(si in SQUARES){\n            square = SQUARES[si];\n\n            nr_candidates = candidates[square].length;\n\n            if(nr_candidates < min_nr_candidates && nr_candidates > 1){\n                min_nr_candidates = nr_candidates;\n                min_candidates_square = square;\n            }\n        }\n\n        // Recursively search through each of the candidates of the square\n        // starting with the one with fewest candidates.\n\n        // Rotate through the candidates forwards\n        var min_candidates = candidates[min_candidates_square];\n        if(!reverse){\n            for(var vi in min_candidates){\n                var val = min_candidates[vi];\n\n                // TODO: Implement a non-rediculous deep copy function\n                var candidates_copy = JSON.parse(JSON.stringify(candidates));\n                var candidates_next = sudoku._search(\n                    sudoku._assign(candidates_copy, min_candidates_square, val)\n                );\n\n                if(candidates_next){\n                    return candidates_next;\n                }\n            }\n\n        // Rotate through the candidates backwards\n        } else {\n            for(vi = min_candidates.length - 1; vi >= 0; --vi){\n                val = min_candidates[vi];\n\n                // TODO: Implement a non-rediculous deep copy function\n                candidates_copy = JSON.parse(JSON.stringify(candidates));\n                candidates_next = sudoku._search(\n                    sudoku._assign(candidates_copy, min_candidates_square, val),\n                    reverse\n                );\n\n                if(candidates_next){\n                    return candidates_next;\n                }\n            }\n        }\n\n        // If we get through all combinations of the square with the fewest\n        // candidates without finding an answer, there isn't one. Return false.\n        return false;\n    };\n\n    sudoku._assign = function(candidates, square, val){\n        /* Eliminate all values, *except* for `val`, from `candidates` at\n        `square` (candidates[square]), and propagate. Return the candidates map\n        when finished. If a contradiciton is found, return false.\n\n        WARNING: This will modify the contents of `candidates` directly.\n        */\n\n        // Grab a list of canidates without 'val'\n        var other_vals = candidates[square].replace(val, \"\");\n\n        // Loop through all other values and eliminate them from the candidates\n        // at the current square, and propigate. If at any point we get a\n        // contradiction, return false.\n        for(var ovi in other_vals){\n            var other_val = other_vals[ovi];\n\n            var candidates_next =\n                sudoku._eliminate(candidates, square, other_val);\n\n            if(!candidates_next){\n                //console.log(\"Contradiction found by _eliminate.\");\n                return false;\n            }\n        }\n\n        return candidates;\n    };\n\n    sudoku._eliminate = function(candidates, square, val){\n        /* Eliminate `val` from `candidates` at `square`, (candidates[square]),\n        and propagate when values or places <= 2. Return updated candidates,\n        unless a contradiction is detected, in which case, return false.\n\n        WARNING: This will modify the contents of `candidates` directly.\n        */\n\n        // If `val` has already been eliminated from candidates[square], return\n        // with candidates.\n        if(!sudoku._in(val, candidates[square])){\n            return candidates;\n        }\n\n        // Remove `val` from candidates[square]\n        candidates[square] = candidates[square].replace(val, '');\n\n        // If the square has only candidate left, eliminate that value from its\n        // peers\n        var nr_candidates = candidates[square].length;\n        if(nr_candidates === 1){\n            var target_val = candidates[square];\n\n            for(var pi in SQUARE_PEERS_MAP[square]){\n                var peer = SQUARE_PEERS_MAP[square][pi];\n\n                var candidates_new =\n                        sudoku._eliminate(candidates, peer, target_val);\n\n                if(!candidates_new){\n                    return false;\n                }\n            }\n\n        // Otherwise, if the square has no candidates, we have a contradiction.\n        // Return false.\n        } if(nr_candidates === 0){\n            return false;\n        }\n\n        // If a unit is reduced to only one place for a value, then assign it\n        for(var ui in SQUARE_UNITS_MAP[square]){\n            var unit = SQUARE_UNITS_MAP[square][ui];\n\n            var val_places = [];\n            for(var si in unit){\n                var unit_square = unit[si];\n                if(sudoku._in(val, candidates[unit_square])){\n                    val_places.push(unit_square);\n                }\n            }\n\n            // If there's no place for this value, we have a contradition!\n            // return false\n            if(val_places.length === 0){\n                return false;\n\n            // Otherwise the value can only be in one place. Assign it there.\n            } else if(val_places.length === 1){\n                candidates_new =\n                    sudoku._assign(candidates, val_places[0], val);\n\n                if(!candidates_new){\n                    return false;\n                }\n            }\n        }\n\n        return candidates;\n    };\n\n\n    // Square relationships\n    // -------------------------------------------------------------------------\n    // Squares, and their relationships with values, units, and peers.\n\n    sudoku._get_square_vals_map = function(board){\n        /* Return a map of squares -> values\n        */\n        var squares_vals_map = {};\n\n        // Make sure `board` is a string of length 81\n        if(board.length !== SQUARES.length){\n            // eslint-disable-next-line\n            throw \"Board/squares length mismatch.\";\n\n        } else {\n            for(var i in SQUARES){\n                squares_vals_map[SQUARES[i]] = board[i];\n            }\n        }\n\n        return squares_vals_map;\n    };\n\n    sudoku._get_square_units_map = function(squares, units){\n        /* Return a map of `squares` and their associated units (row, col, box)\n        */\n        var square_unit_map = {};\n\n        // For every square...\n        for(var si in squares){\n            var cur_square = squares[si];\n\n            // Maintain a list of the current square's units\n            var cur_square_units = [];\n\n            // Look through the units, and see if the current square is in it,\n            // and if so, add it to the list of of the square's units.\n            for(var ui in units){\n                var cur_unit = units[ui];\n\n                if(cur_unit.indexOf(cur_square) !== -1){\n                    cur_square_units.push(cur_unit);\n                }\n            }\n\n            // Save the current square and its units to the map\n            square_unit_map[cur_square] = cur_square_units;\n        }\n\n        return square_unit_map;\n    };\n\n    sudoku._get_square_peers_map = function(squares, units_map){\n        /* Return a map of `squares` and their associated peers, i.e., a set of\n        other squares in the square's unit.\n        */\n        var square_peers_map = {};\n\n        // For every square...\n        for(var si in squares){\n            var cur_square = squares[si];\n            var cur_square_units = units_map[cur_square];\n\n            // Maintain list of the current square's peers\n            var cur_square_peers = [];\n\n            // Look through the current square's units map...\n            for(var sui in cur_square_units){\n                var cur_unit = cur_square_units[sui];\n\n                for(var ui in cur_unit){\n                    var cur_unit_square = cur_unit[ui];\n\n                    if(cur_square_peers.indexOf(cur_unit_square) === -1 &&\n                            cur_unit_square !== cur_square){\n                        cur_square_peers.push(cur_unit_square);\n                    }\n                }\n            }\n\n            // Save the current square an its associated peers to the map\n            square_peers_map[cur_square] = cur_square_peers;\n        }\n\n        return square_peers_map;\n    };\n\n    sudoku._get_all_units = function(rows, cols){\n        /* Return a list of all units (rows, cols, boxes)\n        */\n        var units = [];\n\n        // Rows\n        for(var ri in rows){\n            units.push(sudoku._cross(rows[ri], cols));\n        }\n\n        // Columns\n        for(var ci in cols){\n           units.push(sudoku._cross(rows, cols[ci]));\n        }\n\n        // Boxes\n        var row_squares = [\"ABC\", \"DEF\", \"GHI\"];\n        var col_squares = [\"123\", \"456\", \"789\"];\n        for(var rsi in row_squares){\n            for(var csi in col_squares){\n                units.push(sudoku._cross(row_squares[rsi], col_squares[csi]));\n            }\n        }\n\n        return units;\n    };\n\n\n    // Conversions\n    // -------------------------------------------------------------------------\n    sudoku.board_string_to_grid = function(board_string){\n        /* Convert a board string to a two-dimensional array\n        */\n        var rows = [];\n        var cur_row = [];\n        for(var i in board_string){\n            cur_row.push(board_string[i]);\n            if(i % 9 === 8){\n                rows.push(cur_row);\n                cur_row = [];\n            }\n        }\n        return rows;\n    };\n\n    sudoku.board_grid_to_string = function(board_grid){\n        /* Convert a board grid to a string\n        */\n        var board_string = \"\";\n        for(var r = 0; r < 9; ++r){\n            for(var c = 0; c < 9; ++c){\n                board_string += board_grid[r][c];\n            }\n        }\n        return board_string;\n    };\n\n\n    // Utility\n    // -------------------------------------------------------------------------\n\n    sudoku.print_board = function(board){\n        /* Print a sudoku `board` to the console.\n        */\n\n        // Assure a valid board\n        var report = sudoku.validate_board(board);\n        if(report !== true){\n            throw report;\n        }\n\n        var V_PADDING = \" \";  // Insert after each square\n        var H_PADDING = '\\n'; // Insert after each row\n\n        var V_BOX_PADDING = \"  \"; // Box vertical padding\n        var H_BOX_PADDING = '\\n'; // Box horizontal padding\n\n        var display_string = \"\";\n\n        for(var i in board){\n            var square = board[i];\n\n            // Add the square and some padding\n            display_string += square + V_PADDING;\n\n            // Vertical edge of a box, insert v. box padding\n            if(i % 3 === 2){\n                display_string += V_BOX_PADDING;\n            }\n\n            // End of a line, insert horiz. padding\n            if(i % 9 === 8){\n                display_string += H_PADDING;\n            }\n\n            // Horizontal edge of a box, insert h. box padding\n            if(i % 27 === 26){\n                display_string += H_BOX_PADDING;\n            }\n        }\n\n        console.log(display_string);\n    };\n\n    sudoku.validate_board = function(board){\n        /* Return if the given `board` is valid or not. If it's valid, return\n        true. If it's not, return a string of the reason why it's not.\n        */\n\n        // Check for empty board\n        if(!board){\n            return \"Empty board\";\n        }\n\n        // Invalid board length\n        if(board.length !== NR_SQUARES){\n            return \"Invalid board size. Board must be exactly \" + NR_SQUARES +\n                    \" squares.\";\n        }\n\n        // Check for invalid characters\n        for(var i in board){\n            if(!sudoku._in(board[i], sudoku.DIGITS) && board[i] !== sudoku.BLANK_CHAR){\n                return \"Invalid board character encountered at index \" + i +\n                        \": \" + board[i];\n            }\n        }\n\n        // Otherwise, we're good. Return true.\n        return true;\n    };\n\n    sudoku._cross = function(a, b){\n        /* Cross product of all elements in `a` and `b`, e.g.,\n        sudoku._cross(\"abc\", \"123\") ->\n        [\"a1\", \"a2\", \"a3\", \"b1\", \"b2\", \"b3\", \"c1\", \"c2\", \"c3\"]\n        */\n        var result = [];\n        for(var ai in a){\n            for(var bi in b){\n                result.push(a[ai] + b[bi]);\n            }\n        }\n        return result;\n    };\n\n    sudoku._in = function(v, seq){\n        /* Return if a value `v` is in sequence `seq`.\n        */\n        return seq.indexOf(v) !== -1;\n    };\n\n    sudoku._first_true = function(seq){\n        /* Return the first element in `seq` that is true. If no element is\n        true, return false.\n        */\n        for(var i in seq){\n            if(seq[i]){\n                return seq[i];\n            }\n        }\n        return false;\n    };\n\n    sudoku._shuffle = function(seq){\n        /* Return a shuffled version of `seq`\n        */\n\n        // Create an array of the same size as `seq` filled with false\n        var shuffled = [];\n        for(var i = 0; i < seq.length; ++i){\n            shuffled.push(false);\n        }\n\n        for(i in seq){\n            var ti = sudoku._rand_range(seq.length);\n\n            while(shuffled[ti]){\n                ti = (ti + 1) > (seq.length - 1) ? 0 : (ti + 1);\n            }\n\n            shuffled[ti] = seq[i];\n        }\n\n        return shuffled;\n    };\n\n    sudoku._rand_range = function(max, min){\n        /* Get a random integer in the range of `min` to `max` (non inclusive).\n        If `min` not defined, default to 0. If `max` not defined, throw an\n        error.\n        */\n        min = min || 0;\n        if(max){\n            return Math.floor(Math.random() * (max - min)) + min;\n        } else {\n            // eslint-disable-next-line\n            throw \"Range undefined\";\n        }\n    };\n\n    sudoku._strip_dups = function(seq){\n        /* Strip duplicate values from `seq`\n        */\n        var seq_set = [];\n        var dup_map = {};\n        for(var i in seq){\n            var e = seq[i];\n            if(!dup_map[e]){\n                seq_set.push(e);\n                dup_map[e] = true;\n            }\n        }\n        return seq_set;\n    };\n\n    sudoku._force_range = function(nr, max, min){\n        /* Force `nr` to be within the range from `min` to, but not including,\n        `max`. `min` is optional, and will default to 0. If `nr` is undefined,\n        treat it as zero.\n        */\n        min = min || 0\n        nr = nr || 0\n        if(nr < min){\n            return min;\n        }\n        if(nr > max){\n            return max;\n        }\n        return nr\n    }\n\n    // Initialize library after load\n    initialize();\n\n    export const getSudoku = () => {\n      return sudoku;\n    }\n\n// Pass whatever the root object is, like 'window' in browsers\n//})(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}